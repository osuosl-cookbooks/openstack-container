require_relative '../../spec_helper'

describe 'openstack-container::api' do
  ALL_PLATFORMS.each do |p|
    context "#{p[:platform]} #{p[:version]}" do
      cached(:chef_run) do
        ChefSpec::SoloRunner.new(p).converge(described_recipe)
      end
      include_context 'identity_stubs'
      include_context 'container_stubs'
      before do
        file = instance_double(IO, read: 'foo')
        allow(IO).to receive(:read).and_call_original
        allow(IO).to receive(:read).with('/var/chef/cache/zun/zun/api/app.wsgi') { |&block| block.call(file) }
      end
      it 'converges successfully' do
        expect { chef_run }.to_not raise_error
      end
      %w(
        openstack-common::etcd
        openstack-container::common
      ).each do |r|
        it do
          expect(chef_run).to include_recipe(r)
        end
      end
      it do
        expect(chef_run).to create_template('/etc/zun/api-paste.ini')
          .with(
            source: 'api-paste.ini.erb',
            owner: 'zun',
            group: 'zun',
            mode: '0644'
          )
      end
      it do
        expect(chef_run).to create_cookbook_file('/etc/zun/policy.json')
          .with(
            owner: 'root',
            group: 'zun',
            mode: '0640'
          )
      end
      it do
        expect(chef_run).to run_execute('zun-db-manage upgrade')
          .with(
            command: '/opt/osc-zun/bin/zun-db-manage upgrade',
            user: 'zun',
            group: 'zun'
          )
      end
      it do
        expect(chef_run).to install_apache2_install('openstack').with(listen: '127.0.0.1:9517')
      end
      it do
        expect(chef_run).to enable_apache2_module('wsgi')
      end
      it do
        expect(chef_run).to_not enable_apache2_module('ssl')
      end
      context 'ssl enabled' do
        cached(:chef_run) do
          ChefSpec::SoloRunner.new(p) do |node|
            node.override['openstack']['container']['ssl']['enabled'] = true
          end.converge(described_recipe)
        end
        it do
          expect(chef_run).to enable_apache2_module('ssl')
        end
      end
      it do
        expect(chef_run.apache2_install('openstack')).to subscribe_to('template[/etc/zun/zun.conf]').on(:restart)
      end
      it do
        expect(chef_run).to create_directory('/var/www/html/zun')
          .with(
            owner: 'root',
            group: 'root',
            mode: '755'
          )
      end
      it do
        expect(chef_run).to create_file('/var/www/html/zun/app').with(
          owner: 'root',
          group: 'root',
          mode: '755'
        )
      end
      it do
        expect(chef_run).to create_template('/etc/httpd/sites-available/zun-api.conf').with(
          source: 'wsgi-template.conf.erb',
          variables: {
            ca_certs_path: '/etc/zun/ssl/certs/',
            cert_file: '/etc/zun/ssl/certs/sslcert.pem',
            cert_required: false,
            chain_file: nil,
            ciphers: nil,
            daemon_process: 'zun-api',
            group: 'zun',
            key_file: '/etc/zun/ssl/private/sslkey.pem',
            log_debug: nil,
            log_dir: '/var/log/httpd',
            protocol: 'All -SSLv2 -SSLv3',
            run_dir: '/var/run/httpd',
            server_entry: '/var/www/html/zun/app',
            server_host: '127.0.0.1',
            server_port: 9517,
            user: 'zun',
            use_ssl: false,
            venv: '/opt/osc-zun',
          }
        )
      end
      it do
        expect(chef_run.template('/etc/httpd/sites-available/zun-api.conf')).to notify('service[apache2]').to(:restart)
      end
      [
        /^# This file is automatically generated by Chef$/,
        /^# Any changes will be overwritten$/,
        /<VirtualHost 127.0.0.1:9517>$/,
        %r{WSGIDaemonProcess zun-api processes=2 threads=10 user=zun group=zun display-name=%\{GROUP\} python-home=/opt/osc-zun$},
        /WSGIProcessGroup zun-api$/,
        %r{WSGIScriptAlias / /var/www/html/zun/app$},
        %r{ErrorLog /var/log/httpd/zun-api_error.log},
        %r{CustomLog /var/log/httpd/zun-api_access.log combined},
        %r{<Directory /var/www/html/zun},
        %r{WSGISocketPrefix /var/run/httpd},
      ].each do |line|
        it do
          expect(chef_run).to render_file('/etc/httpd/sites-available/zun-api.conf').with_content(line)
        end
      end
      it do
        expect(chef_run).to enable_apache2_site('zun-api')
      end
      it do
        expect(chef_run.apache2_site('zun-api')).to notify('service[apache2]').to(:restart).immediately
      end
    end
  end
end
